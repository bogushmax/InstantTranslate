// Generated by CoffeeScript 1.3.1
(function() {
  var TAGS_IGNORE_LIST, initialize, onMessage, popup, state,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  state = {};

  state.resetSelectedWord = function() {
    if (state.selectedWord != null) {
      ($(state.selectedWord)).removeClass('word-highlighted');
      return state.selectedWord = null;
    }
  };

  state.getSelectedWord = function() {
    return ($(state.selectedWord)).text();
  };

  state.hideAll = function(event) {
    state.resetSelectedWord();
    return popup.hide();
  };

  state.enable = function() {
    ($('body')).addClass('instant-translate-active');
    ($('.word')).on('click', function(event) {
      event.stopPropagation();
      if (state.selectedWord !== this) {
        ($(state.selectedWord)).removeClass('word-highlighted');
        state.selectedWord = this;
        ($(state.selectedWord)).addClass('word-highlighted');
        return popup.translate(state.getSelectedWord());
      }
    });
    ($(document)).on('click', state.hideAll);
    ($(window)).on('resize', state.hideAll);
    return ($(window)).on('scroll', state.hideAll);
  };

  state.disable = function() {
    ($('body')).removeClass('instant-translate-active');
    state.hideAll();
    ($('.word')).off('click');
    ($(document)).off('click');
    ($(window)).off('resize');
    return ($(window)).off('scroll');
  };

  popup = {};

  popup.inject = function() {
    popup.frame = $("<iframe id=\"popup\"\n  style=\"position: relative; visibility: hidden;\"\n  frameborder=\"no\"\n  scrolling=\"no\" noresize>\n</iframe>");
    ($(window)).on('message', function(event) {
      var data;
      data = event.originalEvent.data;
      switch (data.action) {
        case 'setSize':
          popup.frame.height(data.height);
          popup.frame.width(data.width);
          return popup.setPosition();
        case 'hide':
          popup.hide();
          return state.resetSelectedWord();
      }
    });
    return ($('body')).append(popup.frame);
  };

  popup.hide = function() {
    return popup.frame.css({
      visibility: 'hidden'
    });
  };

  popup.show = function() {
    return popup.frame.css({
      visibility: 'visible'
    });
  };

  popup.translate = function(word) {
    popup.hide();
    return popup.frame.attr('src', chrome.extension.getURL('views/popup.html') + '?word=' + word);
  };

  popup.setPosition = function() {
    var offsetLeft, offsetTop, word;
    word = $(state.selectedWord);
    offsetLeft = (Math.floor(word.width() / 2) + word.offset().left) - popup.frame.width() + 110;
    offsetTop = word.offset().top - popup.frame.height() + 10;
    popup.frame.offset({
      left: offsetLeft,
      top: offsetTop
    });
    return popup.show();
  };

  TAGS_IGNORE_LIST = ['A', 'BUTTON', 'TEXTAREA', 'FIELDSET', 'LABEL', 'FORM', 'SCRIPT'];

  initialize = function() {
    var createTextElement, createWordElement, filter, isAlpha, lastNode, node, text, walker;
    filter = function(node) {
      var _ref;
      if (node.nodeType === Node.TEXT_NODE) {
        return NodeFilter.FILTER_ACCEPT;
      } else {
        if ((_ref = node.tagName, __indexOf.call(TAGS_IGNORE_LIST, _ref) >= 0) || node.onclick !== null) {
          return NodeFilter.FILTER_REJECT;
        } else {
          return NodeFilter.FILTER_SKIP;
        }
      }
    };
    walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT + NodeFilter.SHOW_TEXT, filter, false);
    isAlpha = function(char) {
      return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z');
    };
    createTextElement = function(text) {
      return document.createTextNode(text);
    };
    createWordElement = function(word) {
      var span;
      span = document.createElement('span');
      span.classList.add('word');
      span.appendChild(document.createTextNode(word));
      return span;
    };
    while (walker.nextNode()) {
      if (typeof lastNode !== "undefined" && lastNode !== null) {
        lastNode.remove();
      }
      node = $(walker.currentNode);
      text = node.text();
      (function() {
        var char, index, isWordState, token, _i, _len, _ref, _results;
        _ref = text.split('');
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          char = _ref[index];
          if (isAlpha(char)) {
            if (!(isWordState && (typeof isWordState !== "undefined" && isWordState !== null))) {
              isWordState = true;
              if (typeof token !== "undefined" && token !== null) {
                node.before(createTextElement(token));
              }
              token = new String();
            }
          } else {
            if (isWordState || !(isWordState != null)) {
              isWordState = false;
              if (token != null) {
                node.before(createWordElement(token));
              }
              token = new String();
            }
          }
          token += char;
          if (index === text.length - 1) {
            if (isWordState) {
              _results.push(node.before(createWordElement(token)));
            } else {
              _results.push(node.before(createTextElement(token)));
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      })();
      lastNode = node;
    }
    return popup.inject();
  };

  onMessage = function(message) {
    if (message.isEnabled) {
      return state.enable();
    } else {
      return state.disable();
    }
  };

  chrome.extension.onRequest.addListener(onMessage);

  initialize();

  chrome.extension.sendRequest({
    isInitialized: true
  }, onMessage);

}).call(this);
